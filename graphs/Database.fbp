EXPORT=URL.IN:SERVER
EXPORT=READY.OUT:READY
EXPORT=WRITE.IN:WRITEIN
EXPORT=WRITESERVER.OUT:WRITEOUT
EXPORT=READ.IN:READIN
EXPORT=READSERVER.OUT:READOUT

# Write to PostgreSQL

Url(Split) OUT -> SERVER WriteServer(pg/Postgres)

Write(pgorm/Write) TOKEN -> TOKEN WriteServer()
Write() TEMPLATE -> TEMPLATE WriteServer()
Write() OUT -> IN WriteServer()

# Read from PostgreSQL

Url() OUT -> SERVER ReadServer(pg/Postgres)

Read(pgorm/Read) TOKEN -> TOKEN ReadServer()
Read() TEMPLATE -> TEMPLATE ReadServer()
Read() OUT -> IN ReadServer()

# Setup automatic filtering

Url() OUT -> SERVER ConfigServer(pg/Postgres)

'columns' -> STRING ColumnsToken(SendString)
'SELECT information_schema.columns.table_name, information_schema.columns.column_name FROM information_schema.columns, information_schema.tables WHERE information_schema.tables.table_schema = 'public' AND information_schema.columns.table_name = information_schema.tables.table_name;' -> STRING ReadColumns(SendString)
'_' -> STRING ColumnsActivator(SendString)

Url() OUT -> IN ColumnsToken() OUT -> TOKEN ConfigServer()
Url() OUT -> IN ReadColumns() OUT -> TEMPLATE ConfigServer()
Url() OUT -> IN ColumnsActivator() OUT -> IN ConfigServer()

'columns' -> REGEXP FilterColumns(groups/FilterByGroup)
'table_name' -> GROUPING GroupColumnsByTable(objects/GroupValueByAnother)
'column_name' -> ENCLOSED GroupColumnsByTable()
ConfigServer() OUT -> IN FilterColumns() OUT -> IN GroupColumnsByTable() OUT -> IN Definitions(Split)

Definitions() OUT -> DEFINITION Write()
Definitions() OUT -> IN Ready(Kick)
